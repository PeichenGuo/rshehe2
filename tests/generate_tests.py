import os
PROJ_ROOT = os.environ['PROJ_ROOT']
TEST_ROOT = os.environ['TEST_ROOT']
TESTS_PATH = f'{PROJ_ROOT}/{TEST_ROOT}'
ISATEST_PATH = f"{TESTS_PATH}/isa/build/hex"
BENCHMARK_DIR = f'{TESTS_PATH}/benchmark'
ISA_TEST_NAME = ['rv64um', 'rv64ui']


def FILE_HEADER(str):
    return f"""\
//////////////////////////////////////
// Generated by generate_isatest.py //
//   filename: {str}    //
//          author: GPC             //
//////////////////////////////////////

#[cfg(test)] \
mod test {{
    use rshehe::{{HeHeCore, interface::CtrlSignals}}; 
    
"""

FILE_TAIL = f"""\n}} // test """

for name in ISA_TEST_NAME:
    file_name = f'isatest_{name}.rs'
    testfile = open(TESTS_PATH + '/' + file_name, mode='w')
    testfile.write(FILE_HEADER(name))
    for filename in os.listdir(ISATEST_PATH + "/" + name):
        test = filename.split('.')[0]
        str = f"""\
        #[test]
        fn isatest_{name}_{test}(){{
            let mut core = HeHeCore::new();
            core.load_elf("{ISATEST_PATH}/{name}/{test}.hex");
            for _i in 0..3000{{
                core.tik();
                if core.read_from_host() == 1{{
                    println!("======test succ!======");
                    return;
                }}
                else if core.read_from_host() != 0{{
                    panic!("test fail @ {{:x}}", core.read_from_host());
                }}
            }}
            panic!("{name}_{test}: time limit reach");
        }}\n\n"""
        testfile.write(str)

    testfile.write(FILE_TAIL)
    testfile.close()

# for benchmark in os.listdir(BENCHMARK_DIR):
#     if benchmark.find(".riscv") == -1:
#         continue
#     benchmark_name = benchmark.split(".")[0]
#     file_name = f'benchmark_{benchmark_name}.rs'
#     testfile = open(TESTS_PATH + '/' + file_name, mode='w')
#     testfile.write(FILE_HEADER(name))
#     str = f"""\
#     #[test]
#     fn benchmark_{benchmark_name}(){{
#         let mut core = HeHeCore::new();
#         core.load_elf("./{BENCHMARK_DIR}/benchmark");
#         for _i in 0..2000000{{
#             core.tik();
#             if core.read_from_host() == 1{{
#                 println!("======test succ!======");
#                 return;
#             }}
#             else if core.read_from_host() != 0{{
#                 panic!("test fail @ {{:x}}", core.read_from_host());
#             }}
#         }}
#         panic!("benchmark_{benchmark_name}: time limit reach");
#     }}\n\n"""
#     testfile.write(str)

#     testfile.write(FILE_TAIL)
#     testfile.close()
