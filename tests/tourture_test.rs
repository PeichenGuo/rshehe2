//////////////////////////////////////
//  Generated by generate_tests.py  //
//   filename: tourture_test.rs    //
//          author: GPC             //
//////////////////////////////////////

#[cfg(test)] mod test {
    use rshehe::{HeHeCore, interface::CtrlSignals}; 
    
    #[test]
    fn torture_test5(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test5.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test5: time limit reach");
    }

    #[test]
    fn torture_test49(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test49.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test49: time limit reach");
    }

    #[test]
    fn torture_test61(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test61.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test61: time limit reach");
    }

    #[test]
    fn torture_test75(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test75.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test75: time limit reach");
    }

    #[test]
    fn torture_test74(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test74.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test74: time limit reach");
    }

    #[test]
    fn torture_test60(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test60.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test60: time limit reach");
    }

    #[test]
    fn torture_test48(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test48.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test48: time limit reach");
    }

    #[test]
    fn torture_test4(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test4.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test4: time limit reach");
    }

    #[test]
    fn torture_test6(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test6.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test6: time limit reach");
    }

    #[test]
    fn torture_test89(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test89.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test89: time limit reach");
    }

    #[test]
    fn torture_test76(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test76.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test76: time limit reach");
    }

    #[test]
    fn torture_test62(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test62.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test62: time limit reach");
    }

    #[test]
    fn torture_test63(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test63.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test63: time limit reach");
    }

    #[test]
    fn torture_test77(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test77.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test77: time limit reach");
    }

    #[test]
    fn torture_test88(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test88.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test88: time limit reach");
    }

    #[test]
    fn torture_test7(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test7.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test7: time limit reach");
    }

    #[test]
    fn torture_test3(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test3.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test3: time limit reach");
    }

    #[test]
    fn torture_test98(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test98.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test98: time limit reach");
    }

    #[test]
    fn torture_test73(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test73.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test73: time limit reach");
    }

    #[test]
    fn torture_test67(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test67.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test67: time limit reach");
    }

    #[test]
    fn torture_test66(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test66.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test66: time limit reach");
    }

    #[test]
    fn torture_test72(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test72.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test72: time limit reach");
    }

    #[test]
    fn torture_test99(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test99.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test99: time limit reach");
    }

    #[test]
    fn torture_test2(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test2.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test2: time limit reach");
    }

    #[test]
    fn torture_test64(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test64.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test64: time limit reach");
    }

    #[test]
    fn torture_test70(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test70.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test70: time limit reach");
    }

    #[test]
    fn torture_test58(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test58.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test58: time limit reach");
    }

    #[test]
    fn torture_test59(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test59.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test59: time limit reach");
    }

    #[test]
    fn torture_test71(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test71.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test71: time limit reach");
    }

    #[test]
    fn torture_test65(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test65.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test65: time limit reach");
    }

    #[test]
    fn torture_test1(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test1.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test1: time limit reach");
    }

    #[test]
    fn torture_test16(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test16.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test16: time limit reach");
    }

    #[test]
    fn torture_test17(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test17.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test17: time limit reach");
    }

    #[test]
    fn torture_test29(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test29.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test29: time limit reach");
    }

    #[test]
    fn torture_test15(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test15.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test15: time limit reach");
    }

    #[test]
    fn torture_test14(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test14.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test14: time limit reach");
    }

    #[test]
    fn torture_test28(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test28.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test28: time limit reach");
    }

    #[test]
    fn torture_test10(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test10.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test10: time limit reach");
    }

    #[test]
    fn torture_test38(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test38.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test38: time limit reach");
    }

    #[test]
    fn torture_test39(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test39.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test39: time limit reach");
    }

    #[test]
    fn torture_test11(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test11.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test11: time limit reach");
    }

    #[test]
    fn torture_test13(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test13.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test13: time limit reach");
    }

    #[test]
    fn torture_test12(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test12.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test12: time limit reach");
    }

    #[test]
    fn torture_test23(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test23.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test23: time limit reach");
    }

    #[test]
    fn torture_test37(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test37.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test37: time limit reach");
    }

    #[test]
    fn torture_test36(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test36.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test36: time limit reach");
    }

    #[test]
    fn torture_test22(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test22.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test22: time limit reach");
    }

    #[test]
    fn torture_test100(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test100.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                panic!("succ rate is {}", core.predict_succ_rate());
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test100: time limit reach");
    }

    #[test]
    fn torture_test34(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test34.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test34: time limit reach");
    }

    #[test]
    fn torture_test20(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test20.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test20: time limit reach");
    }

    #[test]
    fn torture_test21(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test21.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test21: time limit reach");
    }

    #[test]
    fn torture_test35(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test35.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test35: time limit reach");
    }

    #[test]
    fn torture_test31(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test31.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test31: time limit reach");
    }

    #[test]
    fn torture_test25(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test25.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test25: time limit reach");
    }

    #[test]
    fn torture_test19(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test19.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test19: time limit reach");
    }

    #[test]
    fn torture_test18(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test18.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test18: time limit reach");
    }

    #[test]
    fn torture_test24(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test24.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test24: time limit reach");
    }

    #[test]
    fn torture_test30(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test30.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test30: time limit reach");
    }

    #[test]
    fn torture_test26(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test26.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test26: time limit reach");
    }

    #[test]
    fn torture_test32(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test32.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test32: time limit reach");
    }

    #[test]
    fn torture_test33(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test33.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test33: time limit reach");
    }

    #[test]
    fn torture_test27(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test27.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test27: time limit reach");
    }

    #[test]
    fn torture_test83(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test83.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test83: time limit reach");
    }

    #[test]
    fn torture_test97(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test97.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test97: time limit reach");
    }

    #[test]
    fn torture_test68(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test68.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test68: time limit reach");
    }

    #[test]
    fn torture_test40(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test40.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test40: time limit reach");
    }

    #[test]
    fn torture_test54(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test54.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test54: time limit reach");
    }

    #[test]
    fn torture_test55(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test55.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test55: time limit reach");
    }

    #[test]
    fn torture_test41(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test41.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test41: time limit reach");
    }

    #[test]
    fn torture_test69(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test69.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test69: time limit reach");
    }

    #[test]
    fn torture_test96(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test96.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test96: time limit reach");
    }

    #[test]
    fn torture_test82(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test82.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test82: time limit reach");
    }

    #[test]
    fn torture_test94(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test94.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test94: time limit reach");
    }

    #[test]
    fn torture_test80(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test80.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test80: time limit reach");
    }

    #[test]
    fn torture_test57(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test57.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test57: time limit reach");
    }

    #[test]
    fn torture_test43(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test43.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test43: time limit reach");
    }

    #[test]
    fn torture_test42(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test42.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test42: time limit reach");
    }

    #[test]
    fn torture_test56(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test56.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test56: time limit reach");
    }

    #[test]
    fn torture_test81(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test81.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test81: time limit reach");
    }

    #[test]
    fn torture_test95(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test95.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test95: time limit reach");
    }

    #[test]
    fn torture_test91(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test91.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test91: time limit reach");
    }

    #[test]
    fn torture_test85(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test85.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test85: time limit reach");
    }

    #[test]
    fn torture_test52(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test52.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test52: time limit reach");
    }

    #[test]
    fn torture_test46(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test46.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test46: time limit reach");
    }

    #[test]
    fn torture_test47(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test47.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test47: time limit reach");
    }

    #[test]
    fn torture_test53(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test53.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test53: time limit reach");
    }

    #[test]
    fn torture_test84(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test84.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test84: time limit reach");
    }

    #[test]
    fn torture_test90(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test90.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test90: time limit reach");
    }

    #[test]
    fn torture_test9(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test9.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test9: time limit reach");
    }

    #[test]
    fn torture_test86(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test86.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test86: time limit reach");
    }

    #[test]
    fn torture_test92(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test92.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test92: time limit reach");
    }

    #[test]
    fn torture_test45(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test45.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test45: time limit reach");
    }

    #[test]
    fn torture_test51(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test51.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test51: time limit reach");
    }

    #[test]
    fn torture_test79(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test79.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test79: time limit reach");
    }

    #[test]
    fn torture_test78(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test78.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test78: time limit reach");
    }

    #[test]
    fn torture_test50(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test50.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test50: time limit reach");
    }

    #[test]
    fn torture_test44(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test44.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test44: time limit reach");
    }

    #[test]
    fn torture_test93(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test93.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test93: time limit reach");
    }

    #[test]
    fn torture_test87(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test87.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test87: time limit reach");
    }

    #[test]
    fn torture_test8(){
        let mut core = HeHeCore::new();
        core.load_elf("/Users/guopeichen/code/lab/rshehe2/tests/torture/build/hex/test8.hex");
        for _i in 0..1000000{
            core.tik();
            if core.read_from_host() == 1{
                println!("======test succ!======");
                return;
            }
            else if core.read_from_host() != 0{
                panic!("test fail @ {:x}", core.read_from_host());
            }
        }
        panic!("torture test8: time limit reach");
    }


} // test 