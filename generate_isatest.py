import os;
PATH = "./isa/build/hex"
TEST_NAME = 'rv64um'
FILE_NAME = f'isatest_{TEST_NAME}.rs'
TESTS_PATH = './tests'


FILE_HEADER = f"""\
//////////////////////////////////////
// Generated by generate_isatest.py //
//   filename: {FILE_NAME}    //
//          author: GPC             //
//////////////////////////////////////

#[cfg(test)] \
mod test {{
    use rshehe::{{HeHeCore, interface::CtrlSignals}}; 
    
"""

FILE_TAIL = f"""\n}} // test """



testfile = open(TESTS_PATH + '/' + FILE_NAME, mode='w')
testfile.write(FILE_HEADER)

# print(os.listdir(PATH + "/" + TEST_NAME))

for filename in os.listdir(PATH + "/" + TEST_NAME):
    test = filename.split('.')[0]
    str = f"""\
    #[test]
    fn isatest_{TEST_NAME}_{test}(){{
        let mut core = HeHeCore::new();
        core.load_elf("./isa/build/hex/{TEST_NAME}/{test}.hex");
        for _i in 0..3000{{
            core.tik();
            if core.read_from_host() == 1{{
                println!("======test succ!======");
                return;
            }}
            else if core.read_from_host() != 0{{
                panic!("test fail @ {{:x}}", core.read_from_host());
            }}
        }}
        panic!("{TEST_NAME}_{test}: time limit reach");
    }}\n\n"""
    testfile.write(str)

testfile.write(FILE_TAIL)
testfile.close()